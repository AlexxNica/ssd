diff --git a/controller/tmgmt.controller.job.inc b/controller/tmgmt.controller.job.inc
index 6140e2d..f67f16e 100644
--- a/controller/tmgmt.controller.job.inc
+++ b/controller/tmgmt.controller.job.inc
@@ -16,8 +16,28 @@ class TMGMTJobController extends EntityAPIController {
    * {@inheritdoc}
    */
   public function save($entity, DatabaseTransaction $transaction = NULL) {
+    /* @var $entity TMGMTJob */
+    /* @var $unchanged_entity TMGMTJob */
+    $unchanged_entity = $entity->identifier() ? entity_load_unchanged($entity->entityType(), $entity->identifier()) : FALSE;
     $entity->changed = REQUEST_TIME;
-    return parent::save($entity, $transaction);
+    $return = parent::save($entity, $transaction);
+
+    // If the target language was changes, and the job was not processed yet:
+    // update all job items. The reason: there already could be existing
+    // (outdated) translations for the current source; they should be reloaded
+    // to match new target language.
+    if ($unchanged_entity && $entity->state == TMGMT_JOB_STATE_UNPROCESSED
+      && !empty($entity->target_language)
+      && $entity->target_language != $unchanged_entity->target_language) {
+      foreach ($entity->getItems() as $job_item) {
+        // Clear job data and call TMGMTJobItem::getData(). This will resave the
+        // job item.
+        $job_item->data = array();
+        $job_item->getData();
+      }
+    }
+
+    return $return;
   }
 
   /**
diff --git a/entity/tmgmt.entity.job_item.inc b/entity/tmgmt.entity.job_item.inc
index b1e7114..ba0e128 100644
--- a/entity/tmgmt.entity.job_item.inc
+++ b/entity/tmgmt.entity.job_item.inc
@@ -338,6 +338,18 @@ class TMGMTJobItem extends Entity {
   }
 
   /**
+   * Returns data array with already existing (outdated) translations.
+   *
+   * @return array
+   */
+  public function getSourceExistingTranslationData() {
+    if ($controller = $this->getSourceController()) {
+      return $controller->getExistingTranslationData($this);
+    }
+    return array();
+  }
+
+  /**
    * Returns the plugin controller of the configured plugin.
    *
    * @return TMGMTSourcePluginControllerInterface
diff --git a/plugin/tmgmt.plugin.interface.source.inc b/plugin/tmgmt.plugin.interface.source.inc
index e733863..8c3f65f 100644
--- a/plugin/tmgmt.plugin.interface.source.inc
+++ b/plugin/tmgmt.plugin.interface.source.inc
@@ -15,6 +15,9 @@ interface TMGMTSourcePluginControllerInterface extends TMGMTPluginBaseInterface
   /**
    * Returns an array with the data structured for translation.
    *
+   * If there is an already existing (outdated) translation for this source, it
+   * should also be loaded.
+   *
    * @param TMGMTJobItem $job_item
    *   The job item entity.
    *
@@ -23,6 +26,15 @@ interface TMGMTSourcePluginControllerInterface extends TMGMTPluginBaseInterface
   public function getData(TMGMTJobItem $job_item);
 
   /**
+   * Returns data array with already existing (outdated) translations.
+   *
+   * @param TMGMTJobItem $job_item
+   *
+   * @return array
+   */
+  public function getExistingTranslationData(TMGMTJobItem $job_item);
+
+  /**
    * Saves a translation.
    *
    * @param TMGMTJobItem $job_item
diff --git a/plugin/tmgmt.plugin.source.inc b/plugin/tmgmt.plugin.source.inc
index 7745629..b1c3e26 100644
--- a/plugin/tmgmt.plugin.source.inc
+++ b/plugin/tmgmt.plugin.source.inc
@@ -15,6 +15,19 @@ abstract class TMGMTDefaultSourcePluginController extends TMGMTPluginBase implem
   /**
    * {@inheritdoc}
    */
+  public function getExistingTranslationData(TMGMTJobItem $job_item) {
+    $data = array();
+    foreach (tmgmt_flatten_data($this->getData($job_item)) as $key => $value) {
+      if (isset($value['#translation']['#text'])) {
+        $data[$key]['#text'] = $value['#translation']['#text'];
+      }
+    }
+    return tmgmt_unflatten_data($data);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
   public function getLabel(TMGMTJobItem $job_item) {
     return t('@plugin item unavailable (@item)', array('@plugin' => $this->pluginInfo['label'], '@item' => $job_item->item_type . ':' . $job_item->item_id));
   }
diff --git a/sources/entity/tmgmt_entity.plugin.inc b/sources/entity/tmgmt_entity.plugin.inc
index 0950356..28ea1b1 100644
--- a/sources/entity/tmgmt_entity.plugin.inc
+++ b/sources/entity/tmgmt_entity.plugin.inc
@@ -30,7 +30,7 @@ class TMGMTEntitySourcePluginController extends TMGMTDefaultSourcePluginControll
     if (!$entity) {
       throw new TMGMTException(t('Unable to load entity %type with id %id', array('%type' => $job_item->item_type, $job_item->item_id)));
     }
-    return tmgmt_field_get_source_data($job_item->item_type, $entity, $job_item->getJob()->source_language, TRUE);
+    return tmgmt_field_get_source_data($job_item->item_type, $entity, $job_item->getJob()->source_language, TRUE, $job_item->getJob()->target_language);
   }
 
   /**
diff --git a/sources/field/tmgmt_field.api.php b/sources/field/tmgmt_field.api.php
index aeac58d..fc1a130 100644
--- a/sources/field/tmgmt_field.api.php
+++ b/sources/field/tmgmt_field.api.php
@@ -20,6 +20,8 @@
  *   The language associated with $items.
  * @param $items
  *   Array of values for this field.
+ * @param array $translated_items
+ *   An array of already translated (outdated) items.
  *
  * @return
  *   An array of translatable text elements, keyed by the schema name of the
@@ -29,7 +31,7 @@
  *
  * @ingroup tmgmt_source
  */
-function hook_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items) {
+function hook_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items, $translated_items) {
 
 }
 
diff --git a/sources/field/tmgmt_field.module b/sources/field/tmgmt_field.module
index 7fc4bd2..c9b29a8 100644
--- a/sources/field/tmgmt_field.module
+++ b/sources/field/tmgmt_field.module
@@ -10,7 +10,7 @@
  *
  * This hook is implemented on behalf of the core text module.
  */
-function text_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items) {
+function text_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items, $translated_items) {
   $structure = array();
   if (!empty($items)) {
     $structure['#label'] = check_plain($instance['label']);
@@ -21,6 +21,10 @@ function text_tmgmt_source_translation_structure($entity_type, $entity, $field,
         '#text' => $value['value'],
         '#translate' => TRUE,
       );
+      // If there is an existing (outdated) translation: add it also.
+      if (isset($translated_items[$delta]['value'])) {
+        $structure[$delta]['value']['#translation']['#text'] = $translated_items[$delta]['value'];
+      }
       // Add format.
       $structure[$delta]['format'] = array(
         '#label' => '',
@@ -52,11 +56,13 @@ function text_tmgmt_source_translation_structure($entity_type, $entity, $field,
  *   If TRUE, only the fields which are flagged as translatable are returned.
  *   Defaults to FALSE, which is usually used for node translation, where the
  *   field translatability does not matter.
+ * @param string|null $target_langcode
+ *   The optional target language.
  *
  * @return array
  *   The structured field data for all translatable fields
  */
-function tmgmt_field_get_source_data($entity_type, $entity, $langcode, $only_translatable = FALSE) {
+function tmgmt_field_get_source_data($entity_type, $entity, $langcode, $only_translatable = FALSE, $target_langcode = NULL) {
   try {
     list(, , $bundle) = entity_extract_ids($entity_type, $entity);
   }
@@ -69,8 +75,15 @@ function tmgmt_field_get_source_data($entity_type, $entity, $langcode, $only_tra
   foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
     $field = field_info_field($field_name);
     $items = field_get_items($entity_type, $entity, $field_name, $langcode);
+    $translated_items = array();
+    if ($target_langcode) {
+      // Avoid language fallback. Load only items which have translation.
+      if (field_language($entity_type, $entity, $field_name, $target_langcode) == $target_langcode) {
+        $translated_items = field_get_items($entity_type, $entity, $field_name, $target_langcode) ?: array();
+      }
+    }
     if ((!$only_translatable || $field['translatable']) && $items) {
-      if ($data = module_invoke($field['module'], 'tmgmt_source_translation_structure', $entity_type, $entity, $field, $instance, $langcode, $items)) {
+      if ($data = module_invoke($field['module'], 'tmgmt_source_translation_structure', $entity_type, $entity, $field, $instance, $langcode, $items, $translated_items)) {
         $fields[$field_name] = $data;
       }
     }
diff --git a/sources/i18n_string/tmgmt_i18n_string.plugin.inc b/sources/i18n_string/tmgmt_i18n_string.plugin.inc
index a1e780c..aa45333 100644
--- a/sources/i18n_string/tmgmt_i18n_string.plugin.inc
+++ b/sources/i18n_string/tmgmt_i18n_string.plugin.inc
@@ -24,6 +24,11 @@ class TMGMTI18nStringSourcePluginController extends TMGMTDefaultSourcePluginCont
           '#text' => $string->string,
           '#translate' => TRUE
         );
+        if ($target_language = $job_item->getJob()->target_language) {
+          if ($existing_translation = $string->get_translation($target_language)) {
+            $structure[$string_id]['#translation']['#text'] = $existing_translation;
+          }
+        }
       }
     }
     return $structure;
diff --git a/sources/i18n_string/tmgmt_i18n_string.test b/sources/i18n_string/tmgmt_i18n_string.test
index 4662644..502f926 100644
--- a/sources/i18n_string/tmgmt_i18n_string.test
+++ b/sources/i18n_string/tmgmt_i18n_string.test
@@ -46,6 +46,9 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
 
     foreach ($job->getItems() as $item) {
       /* @var $item TMGMTJobItem */
+      // Check that there is no existing translation yet.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertTrue(empty($existing_translation_data));
       $item->acceptTranslation();
     }
 
@@ -53,7 +56,17 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $this->assertEqual($item1->item_id, $string_object_name, 'i18n Strings object correctly saved');
 
     // Check string translation.
-    $this->assertEqual(i18n_string_translate('taxonomy:vocabulary:' . $vocabulary->vid . ':name', $source_text, array('langcode' => $job->target_language)), $job->target_language . '_' . $source_text);
+    $translated_name = i18n_string_translate('taxonomy:vocabulary:' . $vocabulary->vid . ':name', $source_text, array('langcode' => $job->target_language));
+    $this->assertEqual($translated_name, $job->target_language . '_' . $source_text);
+
+    // Create new job/job_item for the same data, and check that existing
+    // translation is loaded and correct.
+    $job = $this->createJob();
+    $job->addItem('i18n_string', 'taxonomy_vocabulary', $string_object_name);
+    foreach ($job->getItems() as $item) {
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertEqual($existing_translation_data['taxonomy:vocabulary:' . $vocabulary->vid . ':name']['#text'], $translated_name);
+    }
 
     // Test translation of a taxonomy term.
     /////////////////////////////////////
@@ -80,6 +93,9 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
 
     /* @var $item TMGMTJobItem */
     foreach ($job->getItems() as $item) {
+      // Check that there is no existing translation yet.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertTrue(empty($existing_translation_data));
       // The source is available only in en.
       $this->assertJobItemLangCodes($item, 'en', array('en'));
       $item->acceptTranslation();
@@ -91,11 +107,20 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $this->assertEqual($item1->item_id, $string_object_name);
 
     // Check string translation.
-    $this->assertEqual(i18n_string_translate('taxonomy:term:' . $term->tid . ':name', $source_text_name,
-      array('langcode' => $job->target_language)), $job->target_language . '_' . $source_text_name);
-    $this->assertEqual(i18n_string_translate('taxonomy:term:' . $term->tid . ':description', $source_text_description,
-      array('langcode' => $job->target_language)), $job->target_language . '_' . $source_text_description);
+    $translated_name = i18n_string_translate('taxonomy:term:' . $term->tid . ':name', $source_text_name, array('langcode' => $job->target_language));
+    $this->assertEqual($translated_name, $job->target_language . '_' . $source_text_name);
+    $translated_description = i18n_string_translate('taxonomy:term:' . $term->tid . ':description', $source_text_description, array('langcode' => $job->target_language));
+    $this->assertEqual($translated_description, $job->target_language . '_' . $source_text_description);
 
+    // Create new job/job_item for the same data, and check that existing
+    // translation is loaded and correct.
+    $job = $this->createJob();
+    $job->addItem('i18n_string', 'taxonomy_term', $string_object_name);
+    foreach ($job->getItems() as $item) {
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertEqual($existing_translation_data['taxonomy:term:' . $term->tid . ':name']['#text'], $translated_name);
+      $this->assertEqual($existing_translation_data['taxonomy:term:' . $term->tid . ':description']['#text'], $translated_description);
+    }
   }
 
   function testI18nStringSourceMenu() {
@@ -129,6 +154,9 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $job->requestTranslation();
     /* @var $item TMGMTJobItem */
     foreach ($job->getItems() as $item) {
+      // Check that there is no existing translation yet.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertTrue(empty($existing_translation_data));
       $this->assertJobItemLangCodes($item, 'en', array('en'));
       $item->acceptTranslation();
       $this->assertJobItemLangCodes($item, 'en', array('de', 'en'));
@@ -142,7 +170,17 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $this->assertEqual($item1->item_id, $string_name, 'String is correctly saved');
 
     // Check string translation.
-    $this->assertEqual(i18n_string_translate($string_name . ':title', $source_text, array('langcode' => $job->target_language)), $job->target_language . '_' . $source_text);
+    $translated_title = i18n_string_translate($string_name . ':title', $source_text, array('langcode' => $job->target_language));
+    $this->assertEqual($translated_title, $job->target_language . '_' . $source_text);
+
+    // Create new job/job_item for the same data, and check that existing
+    // translation is loaded and correct.
+    $job = $this->createJob();
+    $job->addItem('i18n_string', 'menu', $string_name);
+    foreach ($job->getItems() as $item) {
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertEqual($existing_translation_data[$string_name . ':title']['#text'], $translated_title);
+    }
 
     // Test translation of a menu item.
     /////////////////////////////////////
@@ -168,6 +206,9 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $job->requestTranslation();
     /* @var $item TMGMTJobItem */
     foreach ($job->getItems() as $item) {
+      // Check that there is no existing translation yet.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertTrue(empty($existing_translation_data));
       $this->assertJobItemLangCodes($item, 'en', array('en'));
       $item->acceptTranslation();
       $this->assertJobItemLangCodes($item, 'en', array('de', 'en'));
@@ -180,8 +221,17 @@ class TMGMTI18nStringSourceTestCase extends TMGMTBaseTestCase {
     $this->assertEqual($item1->item_id, $string_name);
 
     // Check string translation.
-    $this->assertEqual(i18n_string_translate($string_name . ':title', $source_text, array('langcode' => $job->target_language)), $job->target_language . '_' . $source_text);
+    $translated_title = i18n_string_translate($string_name . ':title', $source_text, array('langcode' => $job->target_language));
+    $this->assertEqual($translated_title, $job->target_language . '_' . $source_text);
 
+    // Create new job/job_item for the same data, and check that existing
+    // translation is loaded and correct.
+    $job = $this->createJob();
+    $job->addItem('i18n_string', 'menu_link', $string_name);
+    foreach ($job->getItems() as $item) {
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertEqual($existing_translation_data[$string_name . ':title']['#text'], $translated_title);
+    }
   }
 
   function testI18nStringSourceLangCodes() {
diff --git a/sources/locale/tmgmt_locale.plugin.inc b/sources/locale/tmgmt_locale.plugin.inc
index 9a15cab..515dc2b 100644
--- a/sources/locale/tmgmt_locale.plugin.inc
+++ b/sources/locale/tmgmt_locale.plugin.inc
@@ -122,6 +122,21 @@ class TMGMTLocaleSourcePluginController extends TMGMTDefaultSourcePluginControll
       $locale_object->origin = 'target';
     }
 
+    // This is necessary as the method is also used in the getLabel() callback
+    // and for that case the job is not available in the cart.
+    if (!empty($job_item->tjid)) {
+      // Load translated string.
+      if ($target_language = $job_item->getJob()->target_language) {
+        $query = db_select('locales_target', 'lt');
+        $query->join('locales_source', 'ls', 'ls.lid = lt.lid');
+        $query
+          ->fields('lt', array('translation'))
+          ->condition('lt.lid', $locale_lid)
+          ->condition('lt.language', $target_language);
+        $locale_object->existing_translation = $query->execute()->fetchField();
+      }
+    }
+
     return $locale_object;
   }
 
@@ -176,6 +191,9 @@ class TMGMTLocaleSourcePluginController extends TMGMTDefaultSourcePluginControll
         '#translate' => TRUE,
         '#escape' => $escape,
       );
+      if (isset($locale_object->existing_translation) && $locale_object->existing_translation !== FALSE) {
+        $structure['singular']['#translation']['#text'] = $locale_object->existing_translation;
+      }
       return $structure;
     }
   }
diff --git a/sources/locale/tmgmt_locale.test b/sources/locale/tmgmt_locale.test
index b629f06..4ca05b5 100644
--- a/sources/locale/tmgmt_locale.test
+++ b/sources/locale/tmgmt_locale.test
@@ -51,6 +51,9 @@ class TMGMTLocaleSourceTestCase extends TMGMTBaseTestCase {
 
     foreach ($job->getItems() as $item) {
       /* @var $item TMGMTJobItem */
+      // Check that existing translation is loaded and correct.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertEqual($existing_translation_data['singular']['#text'], 'Hallo Welt');
       $item->acceptTranslation();
       $this->assertTrue($item->isAccepted());
       // The source is now available in en and de.
@@ -75,6 +78,10 @@ class TMGMTLocaleSourceTestCase extends TMGMTBaseTestCase {
 
     foreach ($job->getItems() as $item) {
       /* @var $item TMGMTJobItem */
+      // Check that there is no existing translation data for the Spanish
+      // direction.
+      $existing_translation_data = $item->getSourceExistingTranslationData();
+      $this->assertTrue(empty($existing_translation_data));
       $item->acceptTranslation();
       $this->assertTrue($item->isAccepted());
 
diff --git a/sources/node/tmgmt_node.plugin.inc b/sources/node/tmgmt_node.plugin.inc
index c3f4f74..32422f9 100644
--- a/sources/node/tmgmt_node.plugin.inc
+++ b/sources/node/tmgmt_node.plugin.inc
@@ -18,7 +18,7 @@ class TMGMTNodeSourcePluginController extends TMGMTDefaultSourcePluginController
     $type = node_type_get_type($node);
     // Get all the fields that can be translated and arrange their values into
     // a specific structure.
-    $structure = tmgmt_field_get_source_data('node', $node, $job_item->getJob()->source_language);
+    $structure = tmgmt_field_get_source_data('node', $node, $job_item->getJob()->source_language, FALSE, $job_item->getJob()->target_language);
     $structure['node_title']['#label'] = $type->title_label;
     $structure['node_title']['#text'] = $node->title;
     return $structure;
diff --git a/tests/tmgmt.plugin.test b/tests/tmgmt.plugin.test
index 67748e7..974e9b5 100644
--- a/tests/tmgmt.plugin.test
+++ b/tests/tmgmt.plugin.test
@@ -18,8 +18,17 @@ class TMGMTPluginsTestCase extends TMGMTBaseTestCase {
     );
   }
 
+  /**
+   * Creates a translation job.
+   *
+   * @param string $source
+   * @param string $target
+   * @param int $uid
+   *
+   * @return TMGMTJob
+   */
   function createJob($source = 'en', $target = 'de', $uid = 1) {
-    $job = parent::createJob();
+    $job = parent::createJob($source, $target, $uid);
 
     for ($i = 1; $i < 3; $i++) {
       if ($i == 3) {
@@ -227,4 +236,36 @@ class TMGMTPluginsTestCase extends TMGMTBaseTestCase {
       $this->assertEqual($controller->unescapeText($escaped), $test['item']['#text']);
     }
   }
+
+  /**
+   * Tests support for existing translations.
+   */
+  public function testExistingTranslations() {
+    variable_set('tmgmt_test_load_existing_translation', TRUE);
+
+    // Test default getExistingTranslationData() implementation.
+    $job = $this->createJob();
+    foreach ($job->getItems() as $job_item) {
+      $data = $job_item->getData();
+      $translated_data = $job_item->getSourceController()->getExistingTranslationData($job_item);
+      $this->assertEqual($data['dummy']['deep_nesting']['#translation']['#text'], $translated_data['dummy']['deep_nesting']['#text']);
+    }
+
+    // Test that job items data is reinitialized when the job target language is
+    // changed.
+    $job = $this->createJob();
+    $existing_translations = array();
+    foreach ($job->getItems() as $job_item) {
+      $existing_translations[$job_item->identifier()] = $job_item->getSourceController()->getExistingTranslationData($job_item);
+    }
+    $job->target_language = 'es';
+    $job->save();
+    $job = tmgmt_job_load($job->tjid);
+    foreach ($job->getItems() as $job_item) {
+      $existing_translation = $job_item->getSourceController()->getExistingTranslationData($job_item);
+      $this->assertNotEqual($existing_translations[$job_item->identifier()], $existing_translation);
+    }
+
+    variable_del('tmgmt_test_load_existing_translation');
+  }
 }
diff --git a/tests/tmgmt_test.plugin.source.inc b/tests/tmgmt_test.plugin.source.inc
index b41e588..8709245 100644
--- a/tests/tmgmt_test.plugin.source.inc
+++ b/tests/tmgmt_test.plugin.source.inc
@@ -57,6 +57,11 @@ class TMGMTTestSourcePluginController extends TMGMTDefaultSourcePluginController
       '@id' => $job_item->item_id,
     );
 
+    if (variable_get('tmgmt_test_load_existing_translation') && $job_item->getJob()->target_language) {
+      $source['dummy']['deep_nesting']['#translation']['#text'] = 'Existing translation for job item with type @type and id @id for target language @target_language.';
+      $variables['@target_language'] = $job_item->getJob()->target_language ?: '<none>';
+    }
+
     $this->replacePlaceholders($source, $variables);
 
     return $source;
@@ -74,6 +79,9 @@ class TMGMTTestSourcePluginController extends TMGMTDefaultSourcePluginController
     foreach (element_children($data) as $key) {
       if (isset($data[$key]['#text'])) {
         $data[$key]['#text'] = format_string($data[$key]['#text'], $variables);
+        if (isset($data[$key]['#translation']['#text'])) {
+          $data[$key]['#translation']['#text'] = format_string($data[$key]['#translation']['#text'], $variables);
+        }
       }
       else {
         $this->replacePlaceholders($data[$key], $variables);
diff --git a/translators/tmgmt_local/entity/tmgmt_local.entity.task.inc b/translators/tmgmt_local/entity/tmgmt_local.entity.task.inc
index 3782edf..fa398ef 100644
--- a/translators/tmgmt_local/entity/tmgmt_local.entity.task.inc
+++ b/translators/tmgmt_local/entity/tmgmt_local.entity.task.inc
@@ -193,6 +193,7 @@ class TMGMTLocalTask extends Entity {
     $local_task = entity_create('tmgmt_local_task_item', array(
       'tltid' => $this->identifier(),
       'tjiid' => $job_item->identifier(),
+      'data' => $job_item->getSourceController()->getExistingTranslationData($job_item),
     ));
     $local_task->save();
     return $local_task;
diff --git a/translators/tmgmt_local/tmgmt_local.test b/translators/tmgmt_local/tmgmt_local.test
index 49abfe1..2715207 100644
--- a/translators/tmgmt_local/tmgmt_local.test
+++ b/translators/tmgmt_local/tmgmt_local.test
@@ -284,6 +284,11 @@ class TMGMTLocalTestCase extends TMGMTBaseTestCase {
     $this->assertText($job_comment);
     $this->assertText('test_source:test:1');
 
+    // Check that there is no existing translation loaded.
+    $elements = $this->xpath('//textarea[@name=:name]', array(':name' => 'dummy|deep_nesting[translation]'));
+    $textarea_value = (string) $elements[0];
+    $this->assertTrue(empty($textarea_value));
+
     // Try to complete a translation when translations are missing.
     $this->drupalPost(NULL, array(), t('Save as completed'));
     $this->assertText(t('Missing translation.'));
@@ -439,6 +444,33 @@ class TMGMTLocalTestCase extends TMGMTBaseTestCase {
     $job->delete();
     $this->assertFalse(tmgmt_local_task_item_load($task->tltid));
     $this->assertFalse($task->getItems());
+
+    // Create job for the same source items and check that existing translations
+    // are loaded.
+    variable_set('tmgmt_test_load_existing_translation', TRUE);
+    $job = $this->createJob();
+    $job->translator = $translator->name;
+    $job->addItem('test_source', 'test', '1');
+    $job->addItem('test_source', 'test', '2');
+    $job->save();
+    $job->requestTranslation();
+    list($item1, $item2) = array_values($job->getItems());
+    $this->drupalGet('translate');
+    $this->clickLink(t('assign'));
+    $this->clickLink(t('view'));
+    $go_back_url = $this->getUrl();
+    // Check the first item.
+    $this->clickLink(t('translate'), 0);
+    $elements = $this->xpath('//textarea[@name=:name]', array(':name' => 'dummy|deep_nesting[translation]'));
+    $textarea_value = (string) $elements[0];
+    $this->assertEqual($textarea_value, $item1->data['dummy']['deep_nesting']['#translation']['#text']);
+    // Check the second item.
+    $this->drupalGet($go_back_url);
+    $this->clickLink(t('translate'), 1);
+    $elements = $this->xpath('//textarea[@name=:name]', array(':name' => 'dummy|deep_nesting[translation]'));
+    $textarea_value = (string) $elements[0];
+    $this->assertEqual($textarea_value, $item2->data['dummy']['deep_nesting']['#translation']['#text']);
+    variable_del('tmgmt_test_load_existing_translation');
   }
 
   /**
